import socket
import pandas as pd
from libnmap.process import NmapProcess
from libnmap.parser import NmapParser
from concurrent.futures import ThreadPoolExecutor

#Scan a range of IP addresses for active hosts.
def scan_hosts(network_prefix):
    active_hosts = []
    for ip in range(1, 255):
        addr = f"{network_prefix}.{ip}"
        try:
            socket.gethostbyaddr(addr)
            active_hosts.append(addr)
        except socket.herror:
            continue
    return active_hosts

#Check if a specific port on an IP address is open.
def scan_port(ip, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            return port
    return None

#Scan a range of ports on an IP address.
def scan_ports(ip, start_port=1, end_port=1024):
    open_ports = []
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = [executor.submit(scan_port, ip, port) for port in range(start_port, end_port)]
        for future in futures:
            port = future.result()
            if port:
                open_ports.append(port)
    return open_ports

#Perform an Nmap scan on an IP address.
def nmap_scan(ip):
    nmap_proc = NmapProcess(ip, options="-sV")
    nmap_proc.run()

    scan_results = []
    if nmap_proc.rc == 0:
        report = NmapParser.parse(nmap_proc.stdout)
        for host in report.hosts:
            for serv in host.services:
                if serv.open():
                    scan_results.append({
                        "Host": host.address,
                        "Port": serv.port,
                        "Service": serv.service,
                        "Version": getattr(serv, 'version', 'N/A'),
                        "Vulnerability": None
                    })
    else:
        print(f"Nmap scan failed: {nmap_proc.stderr}")

    return scan_results

#Save scan results to a CSV file.
def generate_report(scan_results, filename="vulnerability_report.csv"):
    df = pd.DataFrame(scan_results, columns=["Host", "Port", "Service", "Version", "Vulnerability"])
    df.to_csv(filename, index=False)
    print(f"Report generated: {filename}")

#Main function to perform network scanning and generate a report.
def main():
    network_prefix = "192.168.1"
    hosts = scan_hosts(network_prefix)
    print("Active hosts:", hosts)

    all_scan_results = []
    for host in hosts:
        print(f"Scanning {host}...")
        open_ports = scan_ports(host)
        if open_ports:
            print(f"Open ports on {host}: {open_ports}")
            scan_results = nmap_scan(host)
            all_scan_results.extend(scan_results)
        else:
            print(f"No open ports found on {host}.")

    if all_scan_results:
        generate_report(all_scan_results)
    else:
        print("No results to report.")

if __name__ == "__main__":
    main()
